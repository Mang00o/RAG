from prittier import frame_text
from warning import manage_warning
from ingesting import Ingesting
from embedding import Embedding
from retrieving import Retrieving
from generating import Generating
import faiss

def main():
    frame_text('Start of script')

    manage_warning()

    #################################
    #       PHASE 1 ~ INGESTING     #
    #################################

    # Specify the directory where the PDFs are located
    directory = "documents"

    # Create a Retriving instance
    ingesting = Ingesting(directory)

    # Extract text from pdf into the directory
    pdf_texts, pdf_filenames = ingesting.extract_text_from_pdfs()

    # Prints the names of the PDF documents from which it extracted the text
    ingesting.print_loaded_documents()

    print("\n-> Documents ingested successfully!")
    
    #################################
    #       PHASE 2 ~ EMBEDDING     #
    #################################

    # Creates an instance of the Embedding class
    embedding = Embedding()

    # Pass document texts to get embeddings (e.g. from pdf_texts)
    embed_documents = embedding.embed_documents(pdf_texts)

    print("\n-> Documents embedded successfully!")
    
    #################################
    #       PHASE 3 ~ INDEXING      #
    #################################

    # Create a FAISS index
    index = faiss.IndexFlatL2(embed_documents.shape[1])

    # Add the document embeddings to the FAISS index for efficient similarity search
    index.add(embed_documents)

    print("\n-> Documents indexed successfully!")

    #################################
    #       PHASE 4 ~ RETRIEVING    #
    #################################

    # Prompt the user to input a query for searching relevant documents
    query = input("\n-> Enter the query to search for relevant documents: ")

    # Creates an instance of the Retrieving class
    retriving = Retrieving(embed_documents, pdf_filenames, index)

    # Perform a search for the top k most relevant documents based on the query embedding
    result = retriving.search_documents(query, k=5)  # 'k' indicates the number of documents to retrieve

    # Print the retrieved documents along with their distances
    print("\n-> Most relevant documents found:")
    print("\tDocument                                | Distance")
    print("\t-----------------------------------------|-----------")
    for doc, distance in result:
        print(f"\t{doc:<40} | {distance:.4f}")

    print("\n-> Documents retrieved successfully!")

    #################################
    #       PHASE 5 ~ GENERATING    #
    #################################
    
    # Create an instance of the Generating class with the PDF texts and filenames
    generating = Generating(pdf_texts, pdf_filenames)

    # Generate a response using the Ollama model based on the query and the search results
    response = generating.generate_response_with_ollama(query, result)
    print("\n-> Response generated by Ollama:\n", response)

    print("\n-> Response generated successfully!")

    #################################
    #       PHASE 6 ~ PROCESSING    #
    #################################

    #not implemented

    #################################

    frame_text('End of the Script')

if __name__ == "__main__":
    main()