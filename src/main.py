from prittier import frame_text
from warning import manage_warning
from ingesting import Ingesting
from embedding import Embedding
from indexing import Indexing
from retrieving import Retrieving
from generating import Generating
from database_manager import DatabaseManager

def main():
    #########################################
    #                 BEGIN                 #
    #########################################
    frame_text('Start of script')

    manage_warning()

    #########################################
    #           PHASE 0 ~ DBING             #
    #########################################

    # Create a Retriving instance
    db_manager = DatabaseManager()

    # Connect to the database
    db_manager.connect()

    # Read documents names from the database
    db_pdfs_names = db_manager.load_pdfs_names()

    #########################################
    #           PHASE 1 ~ INGESTING         #
    #########################################

    # Specify the directory where the PDFs are located
    directory = "documents"

    # Create a Retriving instance
    ingesting = Ingesting(directory, db_pdfs_names)

    # Extract text from pdf into the directory
    ingested_pdfs_names, ingested_pdfs_texts = ingesting.ingesting()

    # Save ingested documents on DB
    db_manager.save_pdfs_ingestions(ingested_pdfs_names, ingested_pdfs_texts)

    print("\n-> Documents ingested successfully!")
    
    #########################################
    #           PHASE 2 ~ EMBEDDING         #
    #########################################

    pdf_filenames = db_manager.load_pdfs_names()
    pdf_texts = db_manager.load_documents_contents(pdf_filenames)
    
    # Creates an instance of the Embedding class
    embedding = Embedding()

    # Pass document texts to get embeddings (e.g. from pdf_texts)
    embed_text = embedding.embedding(pdf_texts)
    
    print("\n-> Documents embedded successfully!")
    
    #########################################
    #           PHASE 3 ~ INDEXING          #
    #########################################

    # Creates an instance of the Indexing class
    indexing = Indexing(embed_text.shape[1])

    # Add the document embeddings to the FAISS index for efficient similarity search
    index = indexing.add(embed_text)

    print("\n-> Documents indexed successfully!")

    #########################################
    #           PHASE 4 ~ RETRIEVING        #
    #########################################

    # Prompt the user to input a query for searching relevant documents

    # Creates an instance of the Retrieving class
    retrieving = Retrieving(embed_text, pdf_filenames, pdf_texts, index)

    # Define const numner of documents to retrieve
    DOCUMENTS_TO_RETRIEVE = 5

    # Define value of variable k
    k = min(DOCUMENTS_TO_RETRIEVE, len(pdf_filenames)) # 'k' indicates the number of documents to retrieve

    # Perform a search for the top k most relevant documents based on the query embedding
    result = retrieving.search_documents(k)  

    # Print the retrieved documents along with their distances
    retrieving.print_relevant_documents(result)

    print("\n-> Documents retrieved successfully!")

    #########################################
    #           PHASE 5 ~ GENERATING        #
    #########################################
    
    # Create an instance of the Generating class with the PDF texts and filenames
    generating = Generating(pdf_texts, pdf_filenames)

    # Generate a response using the Ollama model based on the query and the search results
    response = generating.generate_response_with_ollama(retrieving.query, result)
    
    # Print the response generated by Ollama
    generating.print_ollama_response(response)

    print("\n-> Response generated successfully!")

    #########################################
    #           PHASE 6 ~ PROCESSING        #
    #########################################

    #not implemented

    #########################################
    #                 END                   #
    #########################################

    frame_text('End of the Script')

if __name__ == "__main__":
    main()